clc
clear all
close all
format default

m = 1000;
tau = 0.005;
trials = 1;
mu = 0.2;
dVec = [1,2,4,5,8,10,20,40,50,100,125,200,250,500,1000];

YDvec = zeros(1,length(dVec));
commDVec = zeros(1,length(dVec));
for i = 1:length(dVec)
    d = dVec(i);
    Yvec = zeros(1,trials);
    commVec = zeros(1,trials);
    for j = 1:trials
        [time,comms] = SR_subfunc(m,tau,mu,d);
        Yvec(j) = time;
        commVec(j) = comms/m;
    end
    YDvec(i) = mean(Yvec);
    commDVec(i) = mean(commVec);
end

[Ycdf,x] = cdfcalc(Yvec);
Yccdf = 1 - Ycdf(1:end-1);
% save('SR.mat','Yccdf','x');

function [time,comms] = SR_subfunc(m,tau,mu,d)

    % for each worker, generate the times to compute each symbol, then
    % generate a row for each symbol using the fastest workers, adding to
    % the matrix until it is solvable
    
    comms = 0;
    encode = [];
    workerTimes = zeros(p,ceil(1+(p-1)/d));
    
    % setting time of computation for each worker; first computation is a
    % source symbol
    for worker = 1:p
        workerTimes(worker,1) = exprnd(1/mu) + tau;
        for j = 2:ceil(1+(p-1)/d)
            workerTimes(worker,j) = tau * m / p * d + workerTimes(worker,j-1);
        end
    end
    
    % while matrix is unsolvable using Gaussian elim, generate encoded
    % symbols corresponding to the generated times
    j = 0;
    temp = [ones(p,1),workerTimes(:,1)];
    while (true)
        [time,worker] = min(temp(:,2));
    
        % create new row for every symbol; each worker's first is a source
        % symbol, all others are encoded
        symbol = zeros(1,p);
        if (temp(worker,1) == 1)
            symbol(worker) = 1;
        else
            I = 1:p;
            I = setdiff(I,worker);
            for counter = 1:d
                f = randsrc(1,1,I);
                I = setdiff(I,f);
                symbol(f) = 1;
            end
        end
        comms = comms + 1;
        encode = [encode;symbol];
        if (j >= p && rank(encode) == p)
            break;
        end
        temp(worker,1) = temp(worker,1) + 1;
        temp(worker,2) = workerTimes(worker,temp(worker,1));
        j = j + 1;
    end
end